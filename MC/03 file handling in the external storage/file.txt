activity_main.xml:
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/editText"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter text to save"
        android:inputType="text" />

    <Button
        android:id="@+id/writeButton"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Write to File" />

    <Button
        android:id="@+id/readButton"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Read File" />

    <Button
        android:id="@+id/deleteButton"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Delete File" />

    <TextView
        android:id="@+id/resultTextView"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:paddingTop="16dp"
        android:text="File content will appear here"
        android:textSize="16sp" />

</LinearLayout>



main_activity.kt:
package com.example.filehandling

import android.Manifest
import android.content.pm.PackageManager
import android.os.Bundle
import android.os.Environment
import android.widget.*
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import java.io.File

class MainActivity : AppCompatActivity() {
    private lateinit var editText: EditText
    private lateinit var writeButton: Button
    private lateinit var readButton: Button
    private lateinit var deleteButton: Button
    private lateinit var resultTextView: TextView

    private val fileName = "exampleFile.txt"

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        editText = findViewById(R.id.editText)
        writeButton = findViewById(R.id.writeButton)
        readButton = findViewById(R.id.readButton)
        deleteButton = findViewById(R.id.deleteButton)
        resultTextView = findViewById(R.id.resultTextView)

        // Request storage permissions
        if (!hasPermissions()) {
            requestPermissions()
        }

        writeButton.setOnClickListener {
            if (isExternalStorageWritable()) {
                writeToFile(editText.text.toString())
            } else {
                Toast.makeText(this, "External storage is not writable", Toast.LENGTH_SHORT).show()
            }
        }

        readButton.setOnClickListener {
            if (isExternalStorageReadable()) {
                readFromFile()
            } else {
                Toast.makeText(this, "External storage is not readable", Toast.LENGTH_SHORT).show()
            }
        }

        deleteButton.setOnClickListener {
            if (isExternalStorageWritable()) {
                deleteFile()
            } else {
                Toast.makeText(this, "External storage is not writable", Toast.LENGTH_SHORT).show()
            }
        }
    }

    private fun writeToFile(data: String) {
        val file = File(getExternalFilesDir(null), fileName)
        file.writeText(data)
        Toast.makeText(this, "File written successfully", Toast.LENGTH_SHORT).show()
    }

    private fun readFromFile() {
        val file = File(getExternalFilesDir(null), fileName)
        if (file.exists()) {
            val content = file.readText()
            resultTextView.text = content
            Toast.makeText(this, "File read successfully", Toast.LENGTH_SHORT).show()
        } else {
            Toast.makeText(this, "File does not exist", Toast.LENGTH_SHORT).show()
        }
    }

    private fun deleteFile() {
        val file = File(getExternalFilesDir(null), fileName)
        if (file.exists()) {
            file.delete()
            resultTextView.text = ""
            Toast.makeText(this, "File deleted successfully", Toast.LENGTH_SHORT).show()
        } else {
            Toast.makeText(this, "File does not exist", Toast.LENGTH_SHORT).show()
        }
    }

    private fun hasPermissions(): Boolean {
        val writePermission = ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE)
        val readPermission = ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE)
        return writePermission == PackageManager.PERMISSION_GRANTED &&
                readPermission == PackageManager.PERMISSION_GRANTED
    }

    private fun requestPermissions() {
        ActivityCompat.requestPermissions(
            this,
            arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_EXTERNAL_STORAGE),
            100
        )
    }

    private fun isExternalStorageWritable(): Boolean {
        return Environment.getExternalStorageState() == Environment.MEDIA_MOUNTED
    }

    private fun isExternalStorageReadable(): Boolean {
        return Environment.getExternalStorageState() in setOf(
            Environment.MEDIA_MOUNTED,
            Environment.MEDIA_MOUNTED_READ_ONLY
        )
    }
}



